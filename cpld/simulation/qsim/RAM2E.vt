// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/22/2019 14:54:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RAM2E
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RAM2E_vlg_sample_tst(
	AN3,
	C3M58,
	C7M,
	C14M,
	C14M_2,
	DelayIn,
	MA,
	MD,
	PHI0,
	PHI1,
	Q3,
	Q3_2,
	RD,
	VD,
	nC07X,
	nCASEN,
	nEN80,
	nPCAS,
	nPRAS,
	nWE,
	nWE80,
	sampler_tx
);
input  AN3;
input  C3M58;
input  C7M;
input  C14M;
input  C14M_2;
input [3:0] DelayIn;
input [7:0] MA;
input [7:0] MD;
input  PHI0;
input  PHI1;
input  Q3;
input  Q3_2;
input [7:0] RD;
input [7:0] VD;
input  nC07X;
input  nCASEN;
input  nEN80;
input  nPCAS;
input  nPRAS;
input  nWE;
input  nWE80;
output sampler_tx;

reg sample;
time current_time;
always @(AN3 or C3M58 or C7M or C14M or C14M_2 or DelayIn or MA or MD or PHI0 or PHI1 or Q3 or Q3_2 or RD or VD or nC07X or nCASEN or nEN80 or nPCAS or nPRAS or nWE or nWE80)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RAM2E_vlg_check_tst (
	DelayOut,
	MD,
	RA,
	RD,
	VD,
	XX73SEL,
	nCAS,
	nRAS,
	nRWE,
	sampler_rx
);
input [3:0] DelayOut;
input [7:0] MD;
input [11:8] RA;
input [7:0] RD;
input [7:0] VD;
input  XX73SEL;
input  nCAS;
input  nRAS;
input  nRWE;
input sampler_rx;

reg [3:0] DelayOut_expected;
reg [7:0] MD_expected;
reg [11:8] RA_expected;
reg [7:0] RD_expected;
reg [7:0] VD_expected;
reg  XX73SEL_expected;
reg  nCAS_expected;
reg  nRAS_expected;
reg  nRWE_expected;

reg [3:0] DelayOut_prev;
reg [7:0] MD_prev;
reg [11:8] RA_prev;
reg [7:0] RD_prev;
reg [7:0] VD_prev;
reg  XX73SEL_prev;
reg  nCAS_prev;
reg  nRAS_prev;
reg  nRWE_prev;

reg [3:0] DelayOut_expected_prev;
reg [7:0] MD_expected_prev;
reg [11:8] RA_expected_prev;
reg [7:0] RD_expected_prev;
reg [7:0] VD_expected_prev;
reg  nCAS_expected_prev;
reg  nRAS_expected_prev;
reg  nRWE_expected_prev;

reg [3:0] last_DelayOut_exp;
reg [7:0] last_MD_exp;
reg [11:8] last_RA_exp;
reg [7:0] last_RD_exp;
reg [7:0] last_VD_exp;
reg  last_nCAS_exp;
reg  last_nRAS_exp;
reg  last_nRWE_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	DelayOut_prev = DelayOut;
	MD_prev = MD;
	RA_prev = RA;
	RD_prev = RD;
	VD_prev = VD;
	XX73SEL_prev = XX73SEL;
	nCAS_prev = nCAS;
	nRAS_prev = nRAS;
	nRWE_prev = nRWE;
end

// update expected /o prevs

always @(trigger)
begin
	DelayOut_expected_prev = DelayOut_expected;
	MD_expected_prev = MD_expected;
	RA_expected_prev = RA_expected;
	RD_expected_prev = RD_expected;
	VD_expected_prev = VD_expected;
	nCAS_expected_prev = nCAS_expected;
	nRAS_expected_prev = nRAS_expected;
	nRWE_expected_prev = nRWE_expected;
end


// expected RA[ 11 ]
initial
begin
	RA_expected[11] = 1'bZ;
end 
// expected RA[ 10 ]
initial
begin
	RA_expected[10] = 1'bZ;
end 
// expected RA[ 9 ]
initial
begin
	RA_expected[9] = 1'bZ;
end 
// expected RA[ 8 ]
initial
begin
	RA_expected[8] = 1'bZ;
end 

// expected nRAS
initial
begin
	nRAS_expected = 1'bZ;
end 

// expected nCAS
initial
begin
	nCAS_expected = 1'bZ;
end 

// expected nRWE
initial
begin
	nRWE_expected = 1'bZ;
end 

// expected DelayOut
initial
begin
	DelayOut_expected = 1'bZ;
end 
// generate trigger
always @(DelayOut_expected or DelayOut or MD_expected or MD or RA_expected or RA or RD_expected or RD or VD_expected or VD or XX73SEL_expected or XX73SEL or nCAS_expected or nCAS or nRAS_expected or nRAS or nRWE_expected or nRWE)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DelayOut = %b | expected MD = %b | expected RA = %b | expected RD = %b | expected VD = %b | expected XX73SEL = %b | expected nCAS = %b | expected nRAS = %b | expected nRWE = %b | ",DelayOut_expected_prev,MD_expected_prev,RA_expected_prev,RD_expected_prev,VD_expected_prev,XX73SEL_expected_prev,nCAS_expected_prev,nRAS_expected_prev,nRWE_expected_prev);
	$display("| real DelayOut = %b | real MD = %b | real RA = %b | real RD = %b | real VD = %b | real XX73SEL = %b | real nCAS = %b | real nRAS = %b | real nRWE = %b | ",DelayOut_prev,MD_prev,RA_prev,RD_prev,VD_prev,XX73SEL_prev,nCAS_prev,nRAS_prev,nRWE_prev);
`endif
	if (
		( DelayOut_expected_prev[0] !== 1'bx ) && ( DelayOut_prev[0] !== DelayOut_expected_prev[0] )
		&& ((DelayOut_expected_prev[0] !== last_DelayOut_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DelayOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DelayOut_expected_prev);
		$display ("     Real value = %b", DelayOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DelayOut_exp[0] = DelayOut_expected_prev[0];
	end
	if (
		( DelayOut_expected_prev[1] !== 1'bx ) && ( DelayOut_prev[1] !== DelayOut_expected_prev[1] )
		&& ((DelayOut_expected_prev[1] !== last_DelayOut_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DelayOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DelayOut_expected_prev);
		$display ("     Real value = %b", DelayOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DelayOut_exp[1] = DelayOut_expected_prev[1];
	end
	if (
		( DelayOut_expected_prev[2] !== 1'bx ) && ( DelayOut_prev[2] !== DelayOut_expected_prev[2] )
		&& ((DelayOut_expected_prev[2] !== last_DelayOut_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DelayOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DelayOut_expected_prev);
		$display ("     Real value = %b", DelayOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DelayOut_exp[2] = DelayOut_expected_prev[2];
	end
	if (
		( DelayOut_expected_prev[3] !== 1'bx ) && ( DelayOut_prev[3] !== DelayOut_expected_prev[3] )
		&& ((DelayOut_expected_prev[3] !== last_DelayOut_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DelayOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DelayOut_expected_prev);
		$display ("     Real value = %b", DelayOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DelayOut_exp[3] = DelayOut_expected_prev[3];
	end
	if (
		( MD_expected_prev[0] !== 1'bx ) && ( MD_prev[0] !== MD_expected_prev[0] )
		&& ((MD_expected_prev[0] !== last_MD_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD_expected_prev);
		$display ("     Real value = %b", MD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MD_exp[0] = MD_expected_prev[0];
	end
	if (
		( MD_expected_prev[1] !== 1'bx ) && ( MD_prev[1] !== MD_expected_prev[1] )
		&& ((MD_expected_prev[1] !== last_MD_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD_expected_prev);
		$display ("     Real value = %b", MD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MD_exp[1] = MD_expected_prev[1];
	end
	if (
		( MD_expected_prev[2] !== 1'bx ) && ( MD_prev[2] !== MD_expected_prev[2] )
		&& ((MD_expected_prev[2] !== last_MD_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD_expected_prev);
		$display ("     Real value = %b", MD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MD_exp[2] = MD_expected_prev[2];
	end
	if (
		( MD_expected_prev[3] !== 1'bx ) && ( MD_prev[3] !== MD_expected_prev[3] )
		&& ((MD_expected_prev[3] !== last_MD_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD_expected_prev);
		$display ("     Real value = %b", MD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MD_exp[3] = MD_expected_prev[3];
	end
	if (
		( MD_expected_prev[4] !== 1'bx ) && ( MD_prev[4] !== MD_expected_prev[4] )
		&& ((MD_expected_prev[4] !== last_MD_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD_expected_prev);
		$display ("     Real value = %b", MD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MD_exp[4] = MD_expected_prev[4];
	end
	if (
		( MD_expected_prev[5] !== 1'bx ) && ( MD_prev[5] !== MD_expected_prev[5] )
		&& ((MD_expected_prev[5] !== last_MD_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD_expected_prev);
		$display ("     Real value = %b", MD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MD_exp[5] = MD_expected_prev[5];
	end
	if (
		( MD_expected_prev[6] !== 1'bx ) && ( MD_prev[6] !== MD_expected_prev[6] )
		&& ((MD_expected_prev[6] !== last_MD_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD_expected_prev);
		$display ("     Real value = %b", MD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MD_exp[6] = MD_expected_prev[6];
	end
	if (
		( MD_expected_prev[7] !== 1'bx ) && ( MD_prev[7] !== MD_expected_prev[7] )
		&& ((MD_expected_prev[7] !== last_MD_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD_expected_prev);
		$display ("     Real value = %b", MD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MD_exp[7] = MD_expected_prev[7];
	end
	if (
		( RA_expected_prev[0] !== 1'bx ) && ( RA_prev[0] !== RA_expected_prev[0] )
		&& ((RA_expected_prev[0] !== last_RA_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RA_exp[0] = RA_expected_prev[0];
	end
	if (
		( RA_expected_prev[1] !== 1'bx ) && ( RA_prev[1] !== RA_expected_prev[1] )
		&& ((RA_expected_prev[1] !== last_RA_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RA_exp[1] = RA_expected_prev[1];
	end
	if (
		( RA_expected_prev[2] !== 1'bx ) && ( RA_prev[2] !== RA_expected_prev[2] )
		&& ((RA_expected_prev[2] !== last_RA_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RA_exp[2] = RA_expected_prev[2];
	end
	if (
		( RA_expected_prev[3] !== 1'bx ) && ( RA_prev[3] !== RA_expected_prev[3] )
		&& ((RA_expected_prev[3] !== last_RA_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RA_exp[3] = RA_expected_prev[3];
	end
	if (
		( RD_expected_prev[0] !== 1'bx ) && ( RD_prev[0] !== RD_expected_prev[0] )
		&& ((RD_expected_prev[0] !== last_RD_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_expected_prev);
		$display ("     Real value = %b", RD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RD_exp[0] = RD_expected_prev[0];
	end
	if (
		( RD_expected_prev[1] !== 1'bx ) && ( RD_prev[1] !== RD_expected_prev[1] )
		&& ((RD_expected_prev[1] !== last_RD_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_expected_prev);
		$display ("     Real value = %b", RD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RD_exp[1] = RD_expected_prev[1];
	end
	if (
		( RD_expected_prev[2] !== 1'bx ) && ( RD_prev[2] !== RD_expected_prev[2] )
		&& ((RD_expected_prev[2] !== last_RD_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_expected_prev);
		$display ("     Real value = %b", RD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RD_exp[2] = RD_expected_prev[2];
	end
	if (
		( RD_expected_prev[3] !== 1'bx ) && ( RD_prev[3] !== RD_expected_prev[3] )
		&& ((RD_expected_prev[3] !== last_RD_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_expected_prev);
		$display ("     Real value = %b", RD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RD_exp[3] = RD_expected_prev[3];
	end
	if (
		( RD_expected_prev[4] !== 1'bx ) && ( RD_prev[4] !== RD_expected_prev[4] )
		&& ((RD_expected_prev[4] !== last_RD_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_expected_prev);
		$display ("     Real value = %b", RD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RD_exp[4] = RD_expected_prev[4];
	end
	if (
		( RD_expected_prev[5] !== 1'bx ) && ( RD_prev[5] !== RD_expected_prev[5] )
		&& ((RD_expected_prev[5] !== last_RD_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_expected_prev);
		$display ("     Real value = %b", RD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RD_exp[5] = RD_expected_prev[5];
	end
	if (
		( RD_expected_prev[6] !== 1'bx ) && ( RD_prev[6] !== RD_expected_prev[6] )
		&& ((RD_expected_prev[6] !== last_RD_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_expected_prev);
		$display ("     Real value = %b", RD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RD_exp[6] = RD_expected_prev[6];
	end
	if (
		( RD_expected_prev[7] !== 1'bx ) && ( RD_prev[7] !== RD_expected_prev[7] )
		&& ((RD_expected_prev[7] !== last_RD_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_expected_prev);
		$display ("     Real value = %b", RD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RD_exp[7] = RD_expected_prev[7];
	end
	if (
		( VD_expected_prev[0] !== 1'bx ) && ( VD_prev[0] !== VD_expected_prev[0] )
		&& ((VD_expected_prev[0] !== last_VD_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VD_expected_prev);
		$display ("     Real value = %b", VD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VD_exp[0] = VD_expected_prev[0];
	end
	if (
		( VD_expected_prev[1] !== 1'bx ) && ( VD_prev[1] !== VD_expected_prev[1] )
		&& ((VD_expected_prev[1] !== last_VD_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VD_expected_prev);
		$display ("     Real value = %b", VD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VD_exp[1] = VD_expected_prev[1];
	end
	if (
		( VD_expected_prev[2] !== 1'bx ) && ( VD_prev[2] !== VD_expected_prev[2] )
		&& ((VD_expected_prev[2] !== last_VD_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VD_expected_prev);
		$display ("     Real value = %b", VD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VD_exp[2] = VD_expected_prev[2];
	end
	if (
		( VD_expected_prev[3] !== 1'bx ) && ( VD_prev[3] !== VD_expected_prev[3] )
		&& ((VD_expected_prev[3] !== last_VD_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VD_expected_prev);
		$display ("     Real value = %b", VD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VD_exp[3] = VD_expected_prev[3];
	end
	if (
		( VD_expected_prev[4] !== 1'bx ) && ( VD_prev[4] !== VD_expected_prev[4] )
		&& ((VD_expected_prev[4] !== last_VD_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VD_expected_prev);
		$display ("     Real value = %b", VD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VD_exp[4] = VD_expected_prev[4];
	end
	if (
		( VD_expected_prev[5] !== 1'bx ) && ( VD_prev[5] !== VD_expected_prev[5] )
		&& ((VD_expected_prev[5] !== last_VD_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VD_expected_prev);
		$display ("     Real value = %b", VD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VD_exp[5] = VD_expected_prev[5];
	end
	if (
		( VD_expected_prev[6] !== 1'bx ) && ( VD_prev[6] !== VD_expected_prev[6] )
		&& ((VD_expected_prev[6] !== last_VD_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VD_expected_prev);
		$display ("     Real value = %b", VD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VD_exp[6] = VD_expected_prev[6];
	end
	if (
		( VD_expected_prev[7] !== 1'bx ) && ( VD_prev[7] !== VD_expected_prev[7] )
		&& ((VD_expected_prev[7] !== last_VD_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VD[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VD_expected_prev);
		$display ("     Real value = %b", VD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VD_exp[7] = VD_expected_prev[7];
	end
	if (
		( nCAS_expected_prev !== 1'bx ) && ( nCAS_prev !== nCAS_expected_prev )
		&& ((nCAS_expected_prev !== last_nCAS_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nCAS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nCAS_expected_prev);
		$display ("     Real value = %b", nCAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_nCAS_exp = nCAS_expected_prev;
	end
	if (
		( nRAS_expected_prev !== 1'bx ) && ( nRAS_prev !== nRAS_expected_prev )
		&& ((nRAS_expected_prev !== last_nRAS_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nRAS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nRAS_expected_prev);
		$display ("     Real value = %b", nRAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nRAS_exp = nRAS_expected_prev;
	end
	if (
		( nRWE_expected_prev !== 1'bx ) && ( nRWE_prev !== nRWE_expected_prev )
		&& ((nRWE_expected_prev !== last_nRWE_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nRWE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nRWE_expected_prev);
		$display ("     Real value = %b", nRWE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nRWE_exp = nRWE_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#952000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RAM2E_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AN3;
reg C3M58;
reg C7M;
reg C14M;
reg C14M_2;
reg [3:0] DelayIn;
reg [7:0] MA;
reg [7:0] treg_MD;
reg PHI0;
reg PHI1;
reg Q3;
reg Q3_2;
reg [7:0] treg_RD;
reg [7:0] treg_VD;
reg nC07X;
reg nCASEN;
reg nEN80;
reg nPCAS;
reg nPRAS;
reg nWE;
reg nWE80;
// wires                                               
wire [3:0] DelayOut;
wire [7:0] MD;
wire [11:8] RA;
wire [7:0] RD;
wire [7:0] VD;
wire XX73SEL;
wire nCAS;
wire nRAS;
wire nRWE;

wire sampler;                             

// assign statements (if any)                          
assign MD = treg_MD;
assign RD = treg_RD;
assign VD = treg_VD;
RAM2E i1 (
// port map - connection between master ports and signals/registers   
	.AN3(AN3),
	.C3M58(C3M58),
	.C7M(C7M),
	.C14M(C14M),
	.C14M_2(C14M_2),
	.DelayIn(DelayIn),
	.DelayOut(DelayOut),
	.MA(MA),
	.MD(MD),
	.PHI0(PHI0),
	.PHI1(PHI1),
	.Q3(Q3),
	.Q3_2(Q3_2),
	.RA(RA),
	.RD(RD),
	.VD(VD),
	.XX73SEL(XX73SEL),
	.nC07X(nC07X),
	.nCAS(nCAS),
	.nCASEN(nCASEN),
	.nEN80(nEN80),
	.nPCAS(nPCAS),
	.nPRAS(nPRAS),
	.nRAS(nRAS),
	.nRWE(nRWE),
	.nWE(nWE),
	.nWE80(nWE80)
);

// C14M
initial
begin
	C14M = 1'b0;
	C14M = #34000 1'b1;
	C14M = #34000 1'b0;
	C14M = #34000 1'b1;
	C14M = #34000 1'b0;
	C14M = #34000 1'b1;
	C14M = #34000 1'b0;
	C14M = #34000 1'b1;
	C14M = #34000 1'b0;
	C14M = #34000 1'b1;
	C14M = #34000 1'b0;
	C14M = #34000 1'b1;
	C14M = #34000 1'b0;
	C14M = #34000 1'b1;
	C14M = #34000 1'b0;
	C14M = #34000 1'b1;
	C14M = #34000 1'b0;
	C14M = #34000 1'b1;
	C14M = #34000 1'b0;
	C14M = #34000 1'b1;
	C14M = #34000 1'b0;
	C14M = #34000 1'b1;
	C14M = #34000 1'b0;
	C14M = #34000 1'b1;
	C14M = #34000 1'b0;
	C14M = #34000 1'b1;
	C14M = #34000 1'b0;
	C14M = #34000 1'b1;
end 

// C14M_2
initial
begin
	C14M_2 = 1'b0;
	C14M_2 = #34000 1'b1;
	C14M_2 = #34000 1'b0;
	C14M_2 = #34000 1'b1;
	C14M_2 = #34000 1'b0;
	C14M_2 = #34000 1'b1;
	C14M_2 = #34000 1'b0;
	C14M_2 = #34000 1'b1;
	C14M_2 = #34000 1'b0;
	C14M_2 = #34000 1'b1;
	C14M_2 = #34000 1'b0;
	C14M_2 = #34000 1'b1;
	C14M_2 = #34000 1'b0;
	C14M_2 = #34000 1'b1;
	C14M_2 = #34000 1'b0;
	C14M_2 = #34000 1'b1;
	C14M_2 = #34000 1'b0;
	C14M_2 = #34000 1'b1;
	C14M_2 = #34000 1'b0;
	C14M_2 = #34000 1'b1;
	C14M_2 = #34000 1'b0;
	C14M_2 = #34000 1'b1;
	C14M_2 = #34000 1'b0;
	C14M_2 = #34000 1'b1;
	C14M_2 = #34000 1'b0;
	C14M_2 = #34000 1'b1;
	C14M_2 = #34000 1'b0;
	C14M_2 = #34000 1'b1;
end 

// C7M
initial
begin
	C7M = 1'b0;
	C7M = #51000 1'b1;
	C7M = #68000 1'b0;
	C7M = #68000 1'b1;
	C7M = #68000 1'b0;
	C7M = #68000 1'b1;
	C7M = #68000 1'b0;
	C7M = #68000 1'b1;
	C7M = #68000 1'b0;
	C7M = #68000 1'b1;
	C7M = #68000 1'b0;
	C7M = #68000 1'b1;
	C7M = #68000 1'b0;
	C7M = #68000 1'b1;
	C7M = #68000 1'b0;
end 

// PHI0
initial
begin
	PHI0 = 1'b1;
	PHI0 = #51000 1'b0;
	PHI0 = #476000 1'b1;
end 

// PHI1
initial
begin
	PHI1 = 1'b0;
	PHI1 = #51000 1'b1;
	PHI1 = #476000 1'b0;
end 

// nPRAS
initial
begin
	nPRAS = 1'b1;
	nPRAS = #119000 1'b0;
	nPRAS = #340000 1'b1;
	nPRAS = #136000 1'b0;
	nPRAS = #340000 1'b1;
end 

// nPCAS
initial
begin
	nPCAS = 1'b0;
	nPCAS = #51000 1'b1;
	nPCAS = #204000 1'b0;
	nPCAS = #272000 1'b1;
	nPCAS = #204000 1'b0;
end 

// Q3
initial
begin
	Q3 = 1'b0;
	Q3 = #51000 1'b1;
	Q3 = #272000 1'b0;
	Q3 = #204000 1'b1;
	Q3 = #272000 1'b0;
end 

// nWE
initial
begin
	nWE = 1'b1;
end 

// nWE80
initial
begin
	nWE80 = 1'b1;
end 

// nEN80
initial
begin
	nEN80 = 1'b1;
end 

// nC07X
initial
begin
	nC07X = 1'b1;
end 
// MA[ 7 ]
initial
begin
	MA[7] = 1'b0;
	MA[7] = #136000 1'b1;
	MA[7] = #340000 1'b0;
	MA[7] = #136000 1'b1;
end 
// MA[ 6 ]
initial
begin
	MA[6] = 1'b0;
	MA[6] = #136000 1'b1;
	MA[6] = #340000 1'b0;
	MA[6] = #136000 1'b1;
end 
// MA[ 5 ]
initial
begin
	MA[5] = 1'b0;
	MA[5] = #136000 1'b1;
	MA[5] = #340000 1'b0;
	MA[5] = #136000 1'b1;
end 
// MA[ 4 ]
initial
begin
	MA[4] = 1'b0;
	MA[4] = #136000 1'b1;
	MA[4] = #340000 1'b0;
	MA[4] = #136000 1'b1;
end 
// MA[ 3 ]
initial
begin
	MA[3] = 1'b0;
	MA[3] = #136000 1'b1;
	MA[3] = #340000 1'b0;
	MA[3] = #136000 1'b1;
end 
// MA[ 2 ]
initial
begin
	MA[2] = 1'b0;
	MA[2] = #136000 1'b1;
	MA[2] = #340000 1'b0;
	MA[2] = #136000 1'b1;
end 
// MA[ 1 ]
initial
begin
	MA[1] = 1'b0;
	MA[1] = #136000 1'b1;
	MA[1] = #340000 1'b0;
	MA[1] = #136000 1'b1;
end 
// MA[ 0 ]
initial
begin
	MA[0] = 1'b0;
	MA[0] = #136000 1'b1;
	MA[0] = #340000 1'b0;
	MA[0] = #136000 1'b1;
end 
// RD[ 7 ]
initial
begin
	treg_RD[7] = 1'bZ;
end 
// RD[ 6 ]
initial
begin
	treg_RD[6] = 1'bZ;
end 
// RD[ 5 ]
initial
begin
	treg_RD[5] = 1'bZ;
end 
// RD[ 4 ]
initial
begin
	treg_RD[4] = 1'bZ;
end 
// RD[ 3 ]
initial
begin
	treg_RD[3] = 1'bZ;
end 
// RD[ 2 ]
initial
begin
	treg_RD[2] = 1'bZ;
end 
// RD[ 1 ]
initial
begin
	treg_RD[1] = 1'bZ;
end 
// RD[ 0 ]
initial
begin
	treg_RD[0] = 1'bZ;
end 
// VD[ 7 ]
initial
begin
	treg_VD[7] = 1'bZ;
end 
// VD[ 6 ]
initial
begin
	treg_VD[6] = 1'bZ;
end 
// VD[ 5 ]
initial
begin
	treg_VD[5] = 1'bZ;
end 
// VD[ 4 ]
initial
begin
	treg_VD[4] = 1'bZ;
end 
// VD[ 3 ]
initial
begin
	treg_VD[3] = 1'bZ;
end 
// VD[ 2 ]
initial
begin
	treg_VD[2] = 1'bZ;
end 
// VD[ 1 ]
initial
begin
	treg_VD[1] = 1'bZ;
end 
// VD[ 0 ]
initial
begin
	treg_VD[0] = 1'bZ;
end 
// MD[ 7 ]
initial
begin
	treg_MD[7] = 1'bZ;
end 
// MD[ 6 ]
initial
begin
	treg_MD[6] = 1'bZ;
end 
// MD[ 5 ]
initial
begin
	treg_MD[5] = 1'bZ;
end 
// MD[ 4 ]
initial
begin
	treg_MD[4] = 1'bZ;
end 
// MD[ 3 ]
initial
begin
	treg_MD[3] = 1'bZ;
end 
// MD[ 2 ]
initial
begin
	treg_MD[2] = 1'bZ;
end 
// MD[ 1 ]
initial
begin
	treg_MD[1] = 1'bZ;
end 
// MD[ 0 ]
initial
begin
	treg_MD[0] = 1'bZ;
end 

// AN3
initial
begin
	AN3 = 1'b0;
end 

// C3M58
initial
begin
	C3M58 = 1'b0;
end 

// DelayIn
initial
begin
	DelayIn = 1'b0;
end 

// Q3_2
initial
begin
	Q3_2 = 1'b0;
end 

// nCASEN
initial
begin
	nCASEN = 1'b0;
end 

RAM2E_vlg_sample_tst tb_sample (
	.AN3(AN3),
	.C3M58(C3M58),
	.C7M(C7M),
	.C14M(C14M),
	.C14M_2(C14M_2),
	.DelayIn(DelayIn),
	.MA(MA),
	.MD(MD),
	.PHI0(PHI0),
	.PHI1(PHI1),
	.Q3(Q3),
	.Q3_2(Q3_2),
	.RD(RD),
	.VD(VD),
	.nC07X(nC07X),
	.nCASEN(nCASEN),
	.nEN80(nEN80),
	.nPCAS(nPCAS),
	.nPRAS(nPRAS),
	.nWE(nWE),
	.nWE80(nWE80),
	.sampler_tx(sampler)
);

RAM2E_vlg_check_tst tb_out(
	.DelayOut(DelayOut),
	.MD(MD),
	.RA(RA),
	.RD(RD),
	.VD(VD),
	.XX73SEL(XX73SEL),
	.nCAS(nCAS),
	.nRAS(nRAS),
	.nRWE(nRWE),
	.sampler_rx(sampler)
);
endmodule

